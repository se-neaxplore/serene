scalar Scalar_Any

scalar Scalar_Email

scalar Scalar_Instant

interface Interface_ID {
  id: ID!
}

interface Interface_EmailOrUsername {
  email: Scalar_Email
  username(downcase: Boolean! = false): String
}

type Object_EmailOrUsername implements Interface_EmailOrUsername & Interface_ID {
  id: ID!
  email: Scalar_Email
  username(downcase: Boolean! = false): String
}

input InputObject_EmailOrUsername {
  email: Scalar_Email
  username: String
}

type Object_IffHasChildThenChild implements Interface_ID {
  id: ID!
  hasChild: Boolean!
  child: Object_IffHasChildThenChild
}

union Union_ID = Object_EmailOrUsername | Object_IffHasChildThenChild

enum Enum_DefaultScalar {
  Boolean
  Float
  ID
  Int
  String
}

type Query {
  randPosInt(noDefault: Int!, seed: Int! = 42): Int!
  interfaceID: Interface_ID!
  unionID: Union_ID!
}

type Mutation {
  createUser(user: InputObject_EmailOrUsername!): ID!
}

type Subscription {
  newUsers: [ID!]!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
